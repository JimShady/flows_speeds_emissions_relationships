traffic_flows$total_vehicles  <- (traffic_flows$motorcycle + traffic_flows$taxi + traffic_flows$car + traffic_flows$busandcoach + traffic_flows$lgv + traffic_flows$rigid2axle + traffic_flows$rigid3axle + traffic_flows$rigid4axle +     traffic_flows$artic3axle + traffic_flows$artic5axle + traffic_flows$artic6axle)
traffic_flows$total_light     <- (traffic_flows$motorcycle + traffic_flows$taxi + traffic_flows$car)
traffic_flows$total_heavy     <- (traffic_flows$busandcoach + traffic_flows$lgv + traffic_flows$rigid2axle + traffic_flows$rigid3axle + traffic_flows$rigid4axle + traffic_flows$artic3axle + traffic_flows$artic5axle + traffic_flows$artic6axle)
drop                          <- c('motorcycle', 'taxi', 'car', 'busandcoach', 'lgv', 'rigid2axle', 'rigid3axle', 'rigid4axle', 'artic3axle', 'artic5axle', 'artic6axle')
traffic_flows                 <- traffic_flows[, !(names(traffic_flows) %in% drop)]
emissions                     <- read.csv('X:/Projects/LAEI2013_TfL_Strategy/FilesForHerald4/EmissionsByLink/INPUT_RESULTS_LAEI_ExactCutIntersect_Major_2013_LAEI_V117.csv')
names(emissions)              <- tolower(names(emissions))
drop                          <- c('emissions', 'year', 'petrolcar', 'dieselcar', 'petrollgv', 'diesellgv', 'ltbus', 'coach', 'electriccar', 'electriclgv')
emissions                     <- emissions[, !(names(emissions) %in% drop)]
emissions$total_emissions     <- emissions$motorcycle + emissions$taxi + emissions$car + emissions$busandcoach + emissions$lgv + emissions$rigid + emissions$artic + emissions$rigid2axle + emissions$rigid3axle + emissions$rigid4axle + emissions$artic3axle + emissions$artic5axle + emissions$artic6axle
emissions$toid                <- as.character(emissions$toid)
drop                          <- c('motorcycle', 'taxi', 'car', 'busandcoach', 'lgv', 'rigid', 'artic', 'rigid2axle', 'rigid3axle', 'rigid4axle', 'artic3axle', 'artic5axle', 'artic6axle')
emissions                     <- emissions[, !(names(emissions) %in% drop)]
emissions                     <- emissions[!(emissions$pollutant %in% c('TB_PM10_SW', 'TB_PM25_SW')),]
emissions$pollutant           <- as.character(emissions$pollutant)
emissions[grep('pm25', tolower(emissions$pollutant)),'pollutant'] <- 'pm25'
emissions[grep('pm10', tolower(emissions$pollutant)),'pollutant'] <- 'pm10'
emissions$gridid            <- as.character(emissions$gridid)
emissions$grid_exactcut_id  <- as.character(emissions$grid_exactcut_id)
emissions$dotref            <- as.character(emissions$dotref)
emissions$pollutant         <- tolower(emissions$pollutant)
emissions <- aggregate(total_emissions ~ gridid + toid + grid_exactcut_id + dotref + length + pollutant, data=emissions, FUN=sum)
grid_traffic              <- merge(traffic_flows, grid, by.x = c('grid_exactcut_id'), by.y = c('grid_exact_cut'))
rm(traffic_flows)
grid_traffic              <- grid_traffic[order(grid_traffic$toid),]
grid_traffic <- aggregate(data = grid_traffic, FUN=mean, cbind(speed, total_vehicles, total_light, total_heavy)~ easting+northing+toid)
kable(head(grid_traffic[order(grid_traffic$toid),])) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")
emissions_grids              <- merge(emissions, grid, by.x = 'grid_exactcut_id', by.y = 'grid_exact_cut')
rm(emissions)
emissions_grids              <- emissions_grids[order(emissions_grids$toid),]
all_data                <- merge(emissions_grids, grid_traffic, by.x = c('toid', 'easting', 'northing'), by.y = c('toid', 'easting', 'northing'))
rm(grid, grid_traffic, emissions_grids,drop)
head(all_data)
ukgrid = "+init=epsg:27700"
one_km_emissions <- aggregate(data = all_data, total_emissions ~ pollutant + easting + northing, FUN=sum)
sources          <- as.character((unique(one_km_emissions$pollutant)))
for (i in 1:length(sources)) {
temp              <- one_km_emissions[one_km_emissions$pollutant == sources[i],]
coordinates(temp) <- ~ easting + northing
temp$pollutant    <- NULL
gridded(temp)     <- TRUE
proj4string(temp) <- CRS(ukgrid)
temp              <- raster(temp)
names(temp)       <- tolower(sources[i])
if (i == 1) { one_km_emissions_raster <- temp} else {one_km_emissions_raster <- stack(one_km_emissions_raster, temp)}
}
ten_km_emissions_raster  <- aggregate(one_km_emissions_raster, fact = 10, fun=sum)
rm(one_km_emissions, one_km_emissions_raster, temp, i)
ten_km_emissions_polygons <- rasterToPolygons(ten_km_emissions_raster)
coordinates(all_data)           <- ~ easting + northing
proj4string(all_data)           <- CRS(ukgrid)
head(all_data)
length(unique(all_data$dotref))
aggregate(data = all_data, cbind(length, total_emissions) ~ dotref + pollutant, FUN=sum)
head(all_data)
aggregate(data = all_data, cbind(speed, total_vehicles, total_light, total_heavy) ~ dotref + pollutant, FUN=mean)
merge( aggregate(data = all_data, cbind(length, total_emissions) ~ dotref + pollutant, FUN=sum),
aggregate(data = all_data, cbind(speed, total_vehicles, total_light, total_heavy) ~ dotref + pollutant, FUN=mean),
by = c('dotref, pollutant'))
merge( aggregate(data = all_data, cbind(length, total_emissions) ~ dotref + pollutant, FUN=sum),
aggregate(data = all_data, cbind(speed, total_vehicles, total_light, total_heavy) ~ dotref + pollutant, FUN=mean),
by = c('dotref', 'pollutant'))
all_data    <- merge( aggregate(data = all_data, cbind(length, total_emissions) ~ dotref + pollutant, FUN=sum),
aggregate(data = all_data, cbind(speed, total_vehicles, total_light, total_heavy) ~ dotref + pollutant, FUN=mean),
by = c('dotref', 'pollutant'))
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
### Loading any missing libraries
library(rvest)
library(stringr)
library(raster)
library(rgdal)
library(rgeos)
library(ggplot2)
library(sf)
library(rmarkdown)
library(rasterVis)
library(knitr)
library(kableExtra)
library(reshape2)
library(mapview)
require(spatialEco)
require(sp)
grid        <- read.csv('X:/Projects/LAEI2013_TfL_Strategy/z_GridsForJames.csv')
grid        <- grid[,c('GridIdEx', 'Easting', 'Northing')]
names(grid) <- c('grid_exact_cut', 'easting', 'northing')
traffic_flows                 <- read.csv('X:/Projects/LAEI2013_Gdrive/TrafficFlows/Major_WithAdjustedIbus_AADT/z_AADT_ExactCut_WithIbus_2013.csv')
names(traffic_flows)          <- tolower(names(traffic_flows))
drop                          <- c('year', 'location_exactcut', 'boroughname_exactcut', 'tlrn', 'irr', 'motorwaynumber', 'petrolcar', 'dieselcar', 'electriccar', 'petrollgv', 'diesellgv', 'electriclgv', 'ltbus', 'coach')
traffic_flows                 <- traffic_flows[, !(names(traffic_flows) %in% drop)]
traffic_flows$toid            <- as.character(traffic_flows$toid)
traffic_flows$total_vehicles  <- (traffic_flows$motorcycle + traffic_flows$taxi + traffic_flows$car + traffic_flows$busandcoach + traffic_flows$lgv + traffic_flows$rigid2axle + traffic_flows$rigid3axle + traffic_flows$rigid4axle +     traffic_flows$artic3axle + traffic_flows$artic5axle + traffic_flows$artic6axle)
traffic_flows$total_light     <- (traffic_flows$motorcycle + traffic_flows$taxi + traffic_flows$car)
traffic_flows$total_heavy     <- (traffic_flows$busandcoach + traffic_flows$lgv + traffic_flows$rigid2axle + traffic_flows$rigid3axle + traffic_flows$rigid4axle + traffic_flows$artic3axle + traffic_flows$artic5axle + traffic_flows$artic6axle)
drop                          <- c('motorcycle', 'taxi', 'car', 'busandcoach', 'lgv', 'rigid2axle', 'rigid3axle', 'rigid4axle', 'artic3axle', 'artic5axle', 'artic6axle')
traffic_flows                 <- traffic_flows[, !(names(traffic_flows) %in% drop)]
emissions                     <- read.csv('X:/Projects/LAEI2013_TfL_Strategy/FilesForHerald4/EmissionsByLink/INPUT_RESULTS_LAEI_ExactCutIntersect_Major_2013_LAEI_V117.csv')
names(emissions)              <- tolower(names(emissions))
drop                          <- c('emissions', 'year', 'petrolcar', 'dieselcar', 'petrollgv', 'diesellgv', 'ltbus', 'coach', 'electriccar', 'electriclgv')
emissions                     <- emissions[, !(names(emissions) %in% drop)]
emissions$total_emissions     <- emissions$motorcycle + emissions$taxi + emissions$car + emissions$busandcoach + emissions$lgv + emissions$rigid + emissions$artic + emissions$rigid2axle + emissions$rigid3axle + emissions$rigid4axle + emissions$artic3axle + emissions$artic5axle + emissions$artic6axle
emissions$toid                <- as.character(emissions$toid)
drop                          <- c('motorcycle', 'taxi', 'car', 'busandcoach', 'lgv', 'rigid', 'artic', 'rigid2axle', 'rigid3axle', 'rigid4axle', 'artic3axle', 'artic5axle', 'artic6axle')
emissions                     <- emissions[, !(names(emissions) %in% drop)]
emissions                     <- emissions[!(emissions$pollutant %in% c('TB_PM10_SW', 'TB_PM25_SW')),]
emissions$pollutant           <- as.character(emissions$pollutant)
emissions[grep('pm25', tolower(emissions$pollutant)),'pollutant'] <- 'pm25'
emissions[grep('pm10', tolower(emissions$pollutant)),'pollutant'] <- 'pm10'
emissions$gridid            <- as.character(emissions$gridid)
emissions$grid_exactcut_id  <- as.character(emissions$grid_exactcut_id)
emissions$dotref            <- as.character(emissions$dotref)
emissions$pollutant         <- tolower(emissions$pollutant)
emissions <- aggregate(total_emissions ~ gridid + toid + grid_exactcut_id + dotref + length + pollutant, data=emissions, FUN=sum)
grid_traffic              <- merge(traffic_flows, grid, by.x = c('grid_exactcut_id'), by.y = c('grid_exact_cut'))
rm(traffic_flows)
grid_traffic              <- grid_traffic[order(grid_traffic$toid),]
grid_traffic <- aggregate(data = grid_traffic, FUN=mean, cbind(speed, total_vehicles, total_light, total_heavy)~ easting+northing+toid)
emissions_grids              <- merge(emissions, grid, by.x = 'grid_exactcut_id', by.y = 'grid_exact_cut')
rm(emissions)
emissions_grids              <- emissions_grids[order(emissions_grids$toid),]
all_data                <- merge(emissions_grids, grid_traffic, by.x = c('toid', 'easting', 'northing'), by.y = c('toid', 'easting', 'northing'))
rm(grid, grid_traffic, emissions_grids,drop)
ukgrid = "+init=epsg:27700"
one_km_emissions <- aggregate(data = all_data, total_emissions ~ pollutant + easting + northing, FUN=sum)
sources          <- as.character((unique(one_km_emissions$pollutant)))
for (i in 1:length(sources)) {
temp              <- one_km_emissions[one_km_emissions$pollutant == sources[i],]
coordinates(temp) <- ~ easting + northing
temp$pollutant    <- NULL
gridded(temp)     <- TRUE
proj4string(temp) <- CRS(ukgrid)
temp              <- raster(temp)
names(temp)       <- tolower(sources[i])
if (i == 1) { one_km_emissions_raster <- temp} else {one_km_emissions_raster <- stack(one_km_emissions_raster, temp)}
}
ten_km_emissions_raster  <- aggregate(one_km_emissions_raster, fact = 10, fun=sum)
rm(one_km_emissions, one_km_emissions_raster, temp, i)
ten_km_emissions_polygons <- rasterToPolygons(ten_km_emissions_raster)
head(all_data)
all_data[all_data$dotref == 16001,]
coordinates(all_data)           <- ~ easting + northing
proj4string(all_data)           <- CRS(ukgrid)
result                                                  <- point.in.poly(all_data, ten_km_emissions_polygons)
result                                                  <- data.frame(result)
result$ten_km_contribution                              <- NA
result[result$pollutant == 'no2',]$ten_km_contribution    <- result[result$pollutant == 'no2',]$total_emissions    / result[result$pollutant == 'no2',]$no2
result[result$pollutant == 'nox',]$ten_km_contribution    <- result[result$pollutant == 'nox',]$total_emissions    / result[result$pollutant == 'nox',]$nox
result[result$pollutant == 'pm10',]$ten_km_contribution   <- result[result$pollutant == 'pm10',]$total_emissions   / result[result$pollutant == 'pm10',]$pm10
result[result$pollutant == 'pm25',]$ten_km_contribution   <- result[result$pollutant == 'pm25',]$total_emissions   / result[result$pollutant == 'pm25',]$pm25
rm(all_data)
result <- result[result$total_emissions > 0,]
head(result)
unique(result$dotref)
head(all_data)
head(result)
result[result$dotref == 16001,]
head(result[result$dotref == 16001,])
unique(result[result$dotref == 16001,]$total_light)
unique(result[result$dotref == 16001,]$total_heavy)
result <- merge(aggregate(data = result, cbind(length, total_emissions, ten_km_contributition ~ dotref + pollutant, sum)),
aggregate(data = result, cbind(speed, total_vehicles, total_light, total_heavy) ~ dotref + pollutant, mean),
by = c('dotref', 'pollutant'))
aggregate(data = result, cbind(length, total_emissions, ten_km_contributition ~ dotref + pollutant, sum))
head(result)
result <- merge(aggregate(data = result, cbind(length, total_emissions, ten_km_contributition) ~ dotref + pollutant, sum),
aggregate(data = result, cbind(speed, total_vehicles, total_light, total_heavy) ~ dotref + pollutant, mean),
by = c('dotref', 'pollutant'))
result <- merge(aggregate(data = result, cbind(length, total_emissions, ten_km_contribution) ~ dotref + pollutant, sum),
aggregate(data = result, cbind(speed, total_vehicles, total_light, total_heavy) ~ dotref + pollutant, mean),
by = c('dotref', 'pollutant'))
ggplot(result, aes(ten_km_contribution)) +
geom_histogram(bins = 60)
ggplot(result, aes(total_vehicles, ten_km_contribution)) +
geom_point(alpha = 0.2, colour = 'blue', fill = 'blue', size=0.5) +
facet_wrap(.~pollutant, scales = 'free') +
geom_smooth(colour = 'red', method = 'lm') +
xlab('Number of vehicles (all)') +
ylab('Contribution to 10km grid emissions')
ggplot(result, aes(total_light, ten_km_contribution)) +
geom_point(alpha = 0.2, colour = 'blue', fill = 'blue', size=0.5) +
facet_wrap(.~pollutant, scales = 'free') +
geom_smooth(colour = 'red', method = 'lm') +
xlab('Number of light vehicles') +
ylab('Contribution to 10km grid emissions')
ggplot(result, aes(total_heavy, ten_km_contribution)) +
geom_point(alpha = 0.2, colour = 'blue', fill = 'blue', size=0.5) +
facet_wrap(.~pollutant, scales = 'free') +
geom_smooth(colour = 'red', method = 'lm') +
xlab('Number of heavy vehicles') +
ylab('Contribution to 10km grid emissions')
ggplot(result, aes(speed, ten_km_contribution)) +
geom_point(alpha = 0.2, colour = 'blue', fill = 'blue', size=0.5) +
facet_wrap(.~pollutant, scales = 'free') +
geom_smooth(colour = 'red', method = 'lm') +
xlab('Speed of vehicles') +
ylab('Contribution to 10km grid emissions')
ggplot(result, aes(length, ten_km_contribution)) +
geom_point(alpha = 0.2, colour = 'blue', fill = 'blue', size=0.5) +
facet_wrap(.~pollutant, scales = 'free') +
geom_smooth(colour = 'red', method = 'lm') +
xlab('Length of toid') +
ylab('Contribution to 10km grid emissions')
training_index <- sample(nrow(result), round(nrow(result) * 0.8,0))
training_data <- result[training_index,]
testing_data <- result[-training_index,]
model_results <- data.frame(pollutant = NA,
intercept = as.numeric(''),
length_coef = as.numeric(''),
speed_coef = as.numeric(''),
total_light_coef = as.numeric(''),
total_heavy_coef = as.numeric(''),
stringsAsFactors = F)
model_results_list <- list()
for (i in 1:length(sources)) {
model <- lm(ten_km_contribution ~ length + speed + total_light + total_heavy,
data=training_data[training_data$pollutant == sources[i],])
model_results_list[[i]] <- model
model_results[i,] <- c(sources[i], as.numeric(coef(model)[1]), as.numeric(coef(model)[2]), as.numeric(coef(model)[3]), as.numeric(coef(model)[4]), as.numeric(coef(model)[5]))
rm(model)
}
model_results$intercept         <- as.numeric(model_results$intercept)
model_results$length_coef       <- as.numeric(model_results$length_coef)
model_results$speed_coef        <- as.numeric(model_results$speed_coef)
model_results$total_light_coef  <- as.numeric(model_results$total_light_coef)
model_results$total_heavy_coef  <- as.numeric(model_results$total_heavy_coef)
model_results_list[[1]]
summary(model_results_list[[1]])
summary(model_results_list[[2]])
summary(model_results_list[[3]])
summary(model_results_list[[4]])
testing_data$prediction <- NA
for (i in 1:length(sources)) {
testing_data[testing_data$pollutant == sources[i],'prediction'] <-    model_results[model_results$pollutant == sources[i],]$intercept+(
(testing_data[testing_data$pollutant == sources[i],]$length      * model_results[model_results$pollutant == sources[i],]$length_coef) +
(testing_data[testing_data$pollutant == sources[i],]$speed       * model_results[model_results$pollutant == sources[i],]$speed_coef) +
(testing_data[testing_data$pollutant == sources[i],]$total_light * model_results[model_results$pollutant == sources[i],]$total_light_coef) +
(testing_data[testing_data$pollutant == sources[i],]$total_heavy * model_results[model_results$pollutant == sources[i],]$total_heavy_coef))
}
ggplot(testing_data, aes(ten_km_contribution, prediction)) +
geom_point() +
facet_wrap(.~pollutant, scales = 'free', ncol = 1)
ggplot(testing_data, aes(ten_km_contribution, prediction)) +
geom_point() +
facet_wrap(.~pollutant, scales = 'free', ncol = 1) +
coord_equal()
ggplot(testing_data, aes(ten_km_contribution, prediction)) +
geom_point() +
facet_wrap(.~pollutant, ncol = 1) +
coord_equal()
ggplot(testing_data, aes(ten_km_contribution, prediction)) +
geom_point() +
facet_wrap(.~pollutant, ncol = 1) +
coord_fixed()
ggplot(testing_data, aes(ten_km_contribution, prediction)) +
geom_point() +
facet_wrap(.~pollutant, ncol = 1, scales='free') +
coord_fixed()
ggplot(testing_data, aes(ten_km_contribution, prediction)) +
geom_point() +
facet_wrap(.~pollutant, ncol = 1, scales='free')
ggplot(testing_data, aes(ten_km_contribution, prediction)) +
geom_point() +
facet_wrap(.~pollutant, ncol = 1, scales='free') +
xlim(0,0.4) +
ylim(0,0.4)
ggplot(testing_data, aes(ten_km_contribution, prediction)) +
geom_point() +
facet_wrap(.~pollutant, scales = 'free', ncol = 1)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
### Loading any missing libraries
library(rvest)
library(stringr)
library(raster)
library(rgdal)
library(rgeos)
library(ggplot2)
library(sf)
library(rmarkdown)
library(rasterVis)
library(knitr)
library(kableExtra)
library(reshape2)
library(mapview)
require(spatialEco)
require(sp)
grid        <- read.csv('X:/Projects/LAEI2013_TfL_Strategy/z_GridsForJames.csv')
grid        <- grid[,c('GridIdEx', 'Easting', 'Northing')]
names(grid) <- c('grid_exact_cut', 'easting', 'northing')
kable(head(grid)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")
traffic_flows                 <- read.csv('X:/Projects/LAEI2013_Gdrive/TrafficFlows/Major_WithAdjustedIbus_AADT/z_AADT_ExactCut_WithIbus_2013.csv')
names(traffic_flows)          <- tolower(names(traffic_flows))
drop                          <- c('year', 'location_exactcut', 'boroughname_exactcut', 'tlrn', 'irr', 'motorwaynumber', 'petrolcar', 'dieselcar', 'electriccar', 'petrollgv', 'diesellgv', 'electriclgv', 'ltbus', 'coach')
traffic_flows                 <- traffic_flows[, !(names(traffic_flows) %in% drop)]
traffic_flows$toid            <- as.character(traffic_flows$toid)
traffic_flows$total_vehicles  <- (traffic_flows$motorcycle + traffic_flows$taxi + traffic_flows$car + traffic_flows$busandcoach + traffic_flows$lgv + traffic_flows$rigid2axle + traffic_flows$rigid3axle + traffic_flows$rigid4axle +     traffic_flows$artic3axle + traffic_flows$artic5axle + traffic_flows$artic6axle)
traffic_flows$total_light     <- (traffic_flows$motorcycle + traffic_flows$taxi + traffic_flows$car)
traffic_flows$total_heavy     <- (traffic_flows$busandcoach + traffic_flows$lgv + traffic_flows$rigid2axle + traffic_flows$rigid3axle + traffic_flows$rigid4axle + traffic_flows$artic3axle + traffic_flows$artic5axle + traffic_flows$artic6axle)
drop                          <- c('motorcycle', 'taxi', 'car', 'busandcoach', 'lgv', 'rigid2axle', 'rigid3axle', 'rigid4axle', 'artic3axle', 'artic5axle', 'artic6axle')
traffic_flows                 <- traffic_flows[, !(names(traffic_flows) %in% drop)]
emissions                     <- read.csv('X:/Projects/LAEI2013_TfL_Strategy/FilesForHerald4/EmissionsByLink/INPUT_RESULTS_LAEI_ExactCutIntersect_Major_2013_LAEI_V117.csv')
names(emissions)              <- tolower(names(emissions))
drop                          <- c('emissions', 'year', 'petrolcar', 'dieselcar', 'petrollgv', 'diesellgv', 'ltbus', 'coach', 'electriccar', 'electriclgv')
emissions                     <- emissions[, !(names(emissions) %in% drop)]
emissions$total_emissions     <- emissions$motorcycle + emissions$taxi + emissions$car + emissions$busandcoach + emissions$lgv + emissions$rigid + emissions$artic + emissions$rigid2axle + emissions$rigid3axle + emissions$rigid4axle + emissions$artic3axle + emissions$artic5axle + emissions$artic6axle
emissions$toid                <- as.character(emissions$toid)
drop                          <- c('motorcycle', 'taxi', 'car', 'busandcoach', 'lgv', 'rigid', 'artic', 'rigid2axle', 'rigid3axle', 'rigid4axle', 'artic3axle', 'artic5axle', 'artic6axle')
emissions                     <- emissions[, !(names(emissions) %in% drop)]
emissions                     <- emissions[!(emissions$pollutant %in% c('TB_PM10_SW', 'TB_PM25_SW')),]
emissions$pollutant           <- as.character(emissions$pollutant)
emissions[grep('pm25', tolower(emissions$pollutant)),'pollutant'] <- 'pm25'
emissions[grep('pm10', tolower(emissions$pollutant)),'pollutant'] <- 'pm10'
emissions$gridid            <- as.character(emissions$gridid)
emissions$grid_exactcut_id  <- as.character(emissions$grid_exactcut_id)
emissions$dotref            <- as.character(emissions$dotref)
emissions$pollutant         <- tolower(emissions$pollutant)
emissions <- aggregate(total_emissions ~ gridid + toid + grid_exactcut_id + dotref + length + pollutant, data=emissions, FUN=sum)
grid_traffic              <- merge(traffic_flows, grid, by.x = c('grid_exactcut_id'), by.y = c('grid_exact_cut'))
rm(traffic_flows)
grid_traffic              <- grid_traffic[order(grid_traffic$toid),]
grid_traffic <- aggregate(data = grid_traffic, FUN=mean, cbind(speed, total_vehicles, total_light, total_heavy)~ easting+northing+toid)
emissions_grids              <- merge(emissions, grid, by.x = 'grid_exactcut_id', by.y = 'grid_exact_cut')
rm(emissions)
emissions_grids              <- emissions_grids[order(emissions_grids$toid),]
all_data                <- merge(emissions_grids, grid_traffic, by.x = c('toid', 'easting', 'northing'), by.y = c('toid', 'easting', 'northing'))
rm(grid, grid_traffic, emissions_grids,drop)
ukgrid = "+init=epsg:27700"
one_km_emissions <- aggregate(data = all_data, total_emissions ~ pollutant + easting + northing, FUN=sum)
sources          <- as.character((unique(one_km_emissions$pollutant)))
for (i in 1:length(sources)) {
temp              <- one_km_emissions[one_km_emissions$pollutant == sources[i],]
coordinates(temp) <- ~ easting + northing
temp$pollutant    <- NULL
gridded(temp)     <- TRUE
proj4string(temp) <- CRS(ukgrid)
temp              <- raster(temp)
names(temp)       <- tolower(sources[i])
if (i == 1) { one_km_emissions_raster <- temp} else {one_km_emissions_raster <- stack(one_km_emissions_raster, temp)}
}
ten_km_emissions_raster  <- aggregate(one_km_emissions_raster, fact = 10, fun=sum)
rm(one_km_emissions, one_km_emissions_raster, temp, i)
ten_km_emissions_polygons <- rasterToPolygons(ten_km_emissions_raster)
coordinates(all_data)           <- ~ easting + northing
proj4string(all_data)           <- CRS(ukgrid)
result                                                  <- point.in.poly(all_data, ten_km_emissions_polygons)
result                                                  <- data.frame(result)
result$ten_km_contribution                              <- NA
result[result$pollutant == 'no2',]$ten_km_contribution    <- result[result$pollutant == 'no2',]$total_emissions    / result[result$pollutant == 'no2',]$no2
result[result$pollutant == 'nox',]$ten_km_contribution    <- result[result$pollutant == 'nox',]$total_emissions    / result[result$pollutant == 'nox',]$nox
result[result$pollutant == 'pm10',]$ten_km_contribution   <- result[result$pollutant == 'pm10',]$total_emissions   / result[result$pollutant == 'pm10',]$pm10
result[result$pollutant == 'pm25',]$ten_km_contribution   <- result[result$pollutant == 'pm25',]$total_emissions   / result[result$pollutant == 'pm25',]$pm25
rm(all_data)
result <- result[result$total_emissions > 0,]
head(result)
result[result$pollutant == 'no2',]
nrow(result[result$pollutant == 'no2',])
ggplot(result, aes(ten_km_contribution)) +
geom_histogram(bins = 60) +
facet_wrap(.~pollutant, scales = 'free') +
xlab('Contribution to 10km emissions')
result <- merge(aggregate(data = result, cbind(length, total_emissions, ten_km_contribution) ~ dotref + pollutant, sum),
aggregate(data = result, cbind(speed, total_vehicles, total_light, total_heavy) ~ dotref + pollutant, mean),
by = c('dotref', 'pollutant'))
ggplot(result, aes(ten_km_contribution)) +
geom_histogram(bins = 60) +
facet_wrap(.~pollutant, scales = 'free') +
xlab('Contribution to 10km emissions')
ggplot(result, aes(ten_km_contribution)) +
geom_histogram(bins = 60, fill='blue') +
facet_wrap(.~pollutant, scales = 'free') +
xlab('Contribution to 10km emissions')
ggplot(result, aes(ten_km_contribution)) +
geom_histogram(bins = 60, aes(fill='pollutant')) +
facet_wrap(.~pollutant, scales = 'free') +
xlab('Contribution to 10km emissions')
ggplot(result, aes(ten_km_contribution)) +
geom_histogram(bins = 60, aes(fill=pollutant)) +
facet_wrap(.~pollutant, scales = 'free') +
xlab('Contribution to 10km emissions')
model_results <- data.frame(pollutant = NA,
intercept = as.numeric(''),
length_coef = as.numeric(''),
speed_coef = as.numeric(''),
total_light_coef = as.numeric(''),
total_heavy_coef = as.numeric(''),
stringsAsFactors = F)
model_results_list <- list()
for (i in 1:length(sources)) {
model <- lm(ten_km_contribution ~ length + speed + total_light + total_heavy,
data=training_data[training_data$pollutant == sources[i],])
model_results_list[[i]] <- model
model_results[i,] <- c(sources[i], as.numeric(coef(model)[1]), as.numeric(coef(model)[2]), as.numeric(coef(model)[3]), as.numeric(coef(model)[4]), as.numeric(coef(model)[5]))
rm(model)
}
training_index <- sample(nrow(result), round(nrow(result) * 0.8,0))
training_data <- result[training_index,]
testing_data <- result[-training_index,]
model_results <- data.frame(pollutant = NA,
intercept = as.numeric(''),
length_coef = as.numeric(''),
speed_coef = as.numeric(''),
total_light_coef = as.numeric(''),
total_heavy_coef = as.numeric(''),
stringsAsFactors = F)
model_results_list <- list()
for (i in 1:length(sources)) {
model <- lm(ten_km_contribution ~ length + speed + total_light + total_heavy,
data=training_data[training_data$pollutant == sources[i],])
model_results_list[[i]] <- model
model_results[i,] <- c(sources[i], as.numeric(coef(model)[1]), as.numeric(coef(model)[2]), as.numeric(coef(model)[3]), as.numeric(coef(model)[4]), as.numeric(coef(model)[5]))
rm(model)
}
model_results$intercept         <- as.numeric(model_results$intercept)
model_results$length_coef       <- as.numeric(model_results$length_coef)
model_results$speed_coef        <- as.numeric(model_results$speed_coef)
model_results$total_light_coef  <- as.numeric(model_results$total_light_coef)
model_results$total_heavy_coef  <- as.numeric(model_results$total_heavy_coef)
model_results_list[[1]]
summary(model_results_list[[1]])
model <- lm(ten_km_contribution ~ length + speed + total_light,
data=training_data[training_data$pollutant == sources[i],])
summary(model)
model <- lm(ten_km_contribution ~ total_light,
data=training_data[training_data$pollutant == sources[i],])
summary(model)
model <- lm(ten_km_contribution ~ length,
data=training_data[training_data$pollutant == sources[i],])
summary(model)
model <- lm(ten_km_contribution ~ length + total_light,
data=training_data[training_data$pollutant == sources[i],])
summary(model)
model <- lm(ten_km_contribution ~ length + total_light + total_heavy,
data=training_data[training_data$pollutant == sources[i],])
summary(model)
model <- lm(ten_km_contribution ~ length + speed + total_light + total_heavy,
data=training_data[training_data$pollutant == sources[i],])
summary(model)
nls(ten_km_contribution ~ length + speed + total_light + total_heavy, data=training_data[training_data$pollutant == sources[i],])
nls(ten_km_contribution ~ SSlogis(length + speed + total_light + total_heavy), data=training_data[training_data$pollutant == sources[i],])
nls(ten_km_contribution ~ SSlogis((length + speed + total_light + total_heavy), Asym, xmid, scal), data=training_data[training_data$pollutant == sources[i],])
nls(ten_km_contribution ~ SSlogis((length + speed + total_light + total_heavy), xmid, scal), data=training_data[training_data$pollutant == sources[i],])
nls(ten_km_contribution ~ length, data=training_data[training_data$pollutant == sources[i],])
nls(training_data[training_data$pollutant == sources[i],]$ten_km_contribution ~ training_data[training_data$pollutant == sources[i],]$length)
nls(ten_km_contribution ~ SSlogis(length + speed + total_light + total_heavy), data=training_data[training_data$pollutant == sources[i],])
ggplot(testing_data, aes(ten_km_contribution, prediction)) +
geom_point() +
facet_wrap(.~pollutant, scales = 'free', ncol = 1) +
xlim(0,0.1) +
ylim(0,0.1)
model_results <- data.frame(pollutant = NA,
intercept = as.numeric(''),
length_coef = as.numeric(''),
speed_coef = as.numeric(''),
total_light_coef = as.numeric(''),
total_heavy_coef = as.numeric(''),
stringsAsFactors = F)
model_results_list <- list()
for (i in 1:length(sources)) {
model <- lm(ten_km_contribution ~ length + speed + total_light + total_heavy,
data=training_data[training_data$pollutant == sources[i],])
model_results_list[[i]] <- model
model_results[i,] <- c(sources[i], as.numeric(coef(model)[1]), as.numeric(coef(model)[2]), as.numeric(coef(model)[3]), as.numeric(coef(model)[4]), as.numeric(coef(model)[5]))
rm(model)
}
model_results$intercept         <- as.numeric(model_results$intercept)
model_results$length_coef       <- as.numeric(model_results$length_coef)
model_results$speed_coef        <- as.numeric(model_results$speed_coef)
model_results$total_light_coef  <- as.numeric(model_results$total_light_coef)
model_results$total_heavy_coef  <- as.numeric(model_results$total_heavy_coef)
testing_data$prediction <- NA
for (i in 1:length(sources)) {
testing_data[testing_data$pollutant == sources[i],'prediction'] <-    model_results[model_results$pollutant == sources[i],]$intercept+(
(testing_data[testing_data$pollutant == sources[i],]$length      * model_results[model_results$pollutant == sources[i],]$length_coef) +
(testing_data[testing_data$pollutant == sources[i],]$speed       * model_results[model_results$pollutant == sources[i],]$speed_coef) +
(testing_data[testing_data$pollutant == sources[i],]$total_light * model_results[model_results$pollutant == sources[i],]$total_light_coef) +
(testing_data[testing_data$pollutant == sources[i],]$total_heavy * model_results[model_results$pollutant == sources[i],]$total_heavy_coef))
}
ggplot(testing_data, aes(ten_km_contribution, prediction)) +
geom_point() +
facet_wrap(.~pollutant, scales = 'free', ncol = 1) +
xlim(0,0.1) +
ylim(0,0.1)
ggplot(testing_data, aes(ten_km_contribution, prediction)) +
geom_point() +
facet_wrap(.~pollutant, scales = 'free', ncol = 1) +
xlim(0,0.1) +
ylim(0,0.1)
ggplot(testing_data, aes(ten_km_contribution, prediction)) +
geom_point() +
facet_wrap(.~pollutant, scales = 'free', ncol = 1) +
xlim(0,0.1) +
ylim(0,0.1)
ggplot(testing_data, aes(ten_km_contribution, prediction)) +
geom_point() +
facet_wrap(.~pollutant, scales = 'free', ncol = 1) +
xlim(0,0.1) +
ylim(0,0.1)
ggplot(testing_data, aes(ten_km_contribution, prediction)) +
geom_point() +
facet_wrap(.~pollutant, scales = 'free', ncol = 1) +
xlim(0,0.1) +
ylim(0,0.1)
ggplot(testing_data, aes(ten_km_contribution, prediction)) +
geom_point() +
facet_wrap(.~pollutant, scales = 'free', ncol = 1) +
xlim(0,0.2) +
ylim(0,0.2)
summary(testing_data)
nrow(testing_data[testing_data$prediction < 0,])
ggplot(testing_data, aes(ten_km_contribution, prediction)) +
geom_point() +
facet_wrap(.~pollutant, scales = 'free', ncol = 1)
