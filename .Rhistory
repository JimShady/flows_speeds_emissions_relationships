proj4string(temp) <- CRS(ukgrid)
temp              <- raster(temp)
names(temp)       <- tolower(sources[i])
if (i == 1) { one_km_emissions_raster <- temp} else {one_km_emissions_raster <- stack(one_km_emissions_raster, temp)}
}
i
one_km_emissions <- aggregate(data = one_km_grids, total_emissions ~ pollutant + easting + northing, FUN=sum)
sources          <- as.character((unique(one_km_emissions$pollutant)))
1:length(sources)
for (i in 1:length(sources)) {
temp              <- one_km_emissions[one_km_emissions$pollutant == sources[i],]
coordinates(temp) <- ~ easting + northing
temp$pollutant    <- NULL
gridded(temp)     <- TRUE
proj4string(temp) <- CRS(ukgrid)
temp              <- raster(temp)
names(temp)       <- tolower(sources[i])
if (i == 1) { one_km_emissions_raster <- temp} else {one_km_emissions_raster <- stack(one_km_emissions_raster, temp)}
}
one_km_emissions_raster
plot(one_km_emissions_raster)
emissions                     <- read.csv('X:/Projects/LAEI2013_TfL_Strategy/FilesForHerald4/EmissionsByLink/INPUT_RESULTS_LAEI_ExactCutIntersect_Major_2013_LAEI_V117.csv')
names(emissions)              <- tolower(names(emissions))
drop                          <- c('emissions', 'year', 'petrolcar', 'dieselcar', 'petrollgv', 'diesellgv', 'ltbus', 'coach', 'electriccar', 'electriclgv')
emissions                     <- emissions[, !(names(emissions) %in% drop)]
emissions$total_emissions     <- emissions$motorcycle + emissions$taxi + emissions$car + emissions$busandcoach + emissions$lgv + emissions$rigid + emissions$artic + emissions$rigid2axle + emissions$rigid3axle + emissions$rigid4axle + emissions$artic3axle + emissions$artic5axle + emissions$artic6axle
emissions$toid                <- as.character(emissions$toid)
drop                          <- c('motorcycle', 'taxi', 'car', 'busandcoach', 'lgv', 'rigid', 'artic', 'rigid2axle', 'rigid3axle', 'rigid4axle', 'artic3axle', 'artic5axle', 'artic6axle')
emissions                     <- emissions[, !(names(emissions) %in% drop)]
head(emissions)
emissions$pollutant
unique(emissions$pollutant)
emissions[!(emissions$pollutant %in% c(TB_PM10_SW, TB_PM25_SW)),]
emissions[!(emissions$pollutant %in% c('TB_PM10_SW', 'TB_PM25_SW')),]
ome_km_grids
one_km_grids
head(one_km_emissions)
head(one_km_grids)
mapviewt(plot(one_km_emissions_raster$no2)
mapview(plot(one_km_emissions_raster$no2))
library(mapview)
mapview(plot(one_km_emissions_raster$no2))
mapview(one_km_emissions_raster$no2)
mapview(one_km_emissions_raster$no2)
plot(one_km_emissions_raster$no2)
dissagregate(one_km_emissions_raster, fact = 10, fun=mean)
disaggregate(one_km_emissions_raster, fact = 10, fun=mean)
one_km_emissions_raster
ten_km_emissions_raster  <- disaggregate(one_km_emissions_raster, fact = 10, fun=sum)
plot(ten_km_emissions_raster)
one_km_emissions <- aggregate(data = all_data, total_emissions ~ pollutant + easting + northing, FUN=sum)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
### Loading any missing libraries
library(rvest)
library(stringr)
library(raster)
library(rgdal)
library(rgeos)
library(ggplot2)
library(sf)
library(rmarkdown)
library(rasterVis)
library(knitr)
library(kableExtra)
library(reshape2)
library(mapview)
grid        <- read.csv('X:/Projects/LAEI2013_TfL_Strategy/z_GridsForJames.csv')
grid        <- grid[,c('GridIdEx', 'Easting', 'Northing')]
names(grid) <- c('grid_exact_cut', 'easting', 'northing')
kable(head(grid)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")
traffic_flows                 <- read.csv('X:/Projects/LAEI2013_Gdrive/TrafficFlows/Major_WithAdjustedIbus_AADT/z_AADT_ExactCut_WithIbus_2013.csv')
names(traffic_flows)          <- tolower(names(traffic_flows))
drop                          <- c('year', 'location_exactcut', 'boroughname_exactcut', 'tlrn', 'irr', 'motorwaynumber', 'petrolcar', 'dieselcar', 'electriccar', 'petrollgv', 'diesellgv', 'electriclgv', 'ltbus', 'coach')
traffic_flows                 <- traffic_flows[, !(names(traffic_flows) %in% drop)]
traffic_flows$toid            <- as.character(traffic_flows$toid)
traffic_flows$total_vehicles  <- (traffic_flows$motorcycle + traffic_flows$taxi + traffic_flows$car + traffic_flows$busandcoach + traffic_flows$lgv + traffic_flows$rigid2axle + traffic_flows$rigid3axle + traffic_flows$rigid4axle +     traffic_flows$artic3axle + traffic_flows$artic5axle + traffic_flows$artic6axle)
traffic_flows$total_light     <- (traffic_flows$motorcycle + traffic_flows$taxi + traffic_flows$car)
traffic_flows$total_heavy     <- (traffic_flows$busandcoach + traffic_flows$lgv + traffic_flows$rigid2axle + traffic_flows$rigid3axle + traffic_flows$rigid4axle + traffic_flows$artic3axle + traffic_flows$artic5axle + traffic_flows$artic6axle)
drop                          <- c('motorcycle', 'taxi', 'car', 'busandcoach', 'lgv', 'rigid2axle', 'rigid3axle', 'rigid4axle', 'artic3axle', 'artic5axle', 'artic6axle')
traffic_flows                 <- traffic_flows[, !(names(traffic_flows) %in% drop)]
kable(head(traffic_flows)) %>%  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")
emissions                     <- read.csv('X:/Projects/LAEI2013_TfL_Strategy/FilesForHerald4/EmissionsByLink/INPUT_RESULTS_LAEI_ExactCutIntersect_Major_2013_LAEI_V117.csv')
names(emissions)              <- tolower(names(emissions))
drop                          <- c('emissions', 'year', 'petrolcar', 'dieselcar', 'petrollgv', 'diesellgv', 'ltbus', 'coach', 'electriccar', 'electriclgv')
emissions                     <- emissions[, !(names(emissions) %in% drop)]
emissions$total_emissions     <- emissions$motorcycle + emissions$taxi + emissions$car + emissions$busandcoach + emissions$lgv + emissions$rigid + emissions$artic + emissions$rigid2axle + emissions$rigid3axle + emissions$rigid4axle + emissions$artic3axle + emissions$artic5axle + emissions$artic6axle
emissions$toid                <- as.character(emissions$toid)
drop                          <- c('motorcycle', 'taxi', 'car', 'busandcoach', 'lgv', 'rigid', 'artic', 'rigid2axle', 'rigid3axle', 'rigid4axle', 'artic3axle', 'artic5axle', 'artic6axle')
emissions                     <- emissions[, !(names(emissions) %in% drop)]
emissions                     <- emissions[!(emissions$pollutant %in% c('TB_PM10_SW', 'TB_PM25_SW')),]
kable(head(emissions)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")
grid_traffic              <- merge(traffic_flows, grid, by.x = c('grid_exactcut_id'), by.y = c('grid_exact_cut'))
rm(traffic_flows)
grid_traffic              <- grid_traffic[order(grid_traffic$toid),]
kable(head(grid_traffic)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")
grid_traffic <- aggregate(data = grid_traffic, FUN=mean, cbind(speed, total_vehicles, total_light, total_heavy)~ easting+northing+toid)
kable(head(grid_traffic[order(grid_traffic$toid),])) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")
emissions_grids              <- merge(emissions, grid, by.x = 'grid_exactcut_id', by.y = 'grid_exact_cut')
rm(emissions)
emissions_grids              <- emissions_grids[order(emissions_grids$toid),]
all_data                <- merge(emissions_grids, grid_traffic, by.x = c('toid', 'easting', 'northing'), by.y = c('toid', 'easting', 'northing'))
rm(grid, grid_traffic, emissions_grids,drop)
kable(all_data[all_data$easting == 512500 & all_data$northing == 198500 & all_data$pollutant == 'NO2',]) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")
one_km_emissions <- aggregate(data = all_data, total_emissions ~ pollutant + easting + northing, FUN=sum)
sources          <- as.character((unique(one_km_emissions$pollutant)))
for (i in 1:length(sources)) {
temp              <- one_km_emissions[one_km_emissions$pollutant == sources[i],]
coordinates(temp) <- ~ easting + northing
temp$pollutant    <- NULL
gridded(temp)     <- TRUE
proj4string(temp) <- CRS(ukgrid)
temp              <- raster(temp)
names(temp)       <- tolower(sources[i])
if (i == 1) { one_km_emissions_raster <- temp} else {one_km_emissions_raster <- stack(one_km_emissions_raster, temp)}
}
ukgrid = "+init=epsg:27700"
one_km_emissions <- aggregate(data = all_data, total_emissions ~ pollutant + easting + northing, FUN=sum)
sources          <- as.character((unique(one_km_emissions$pollutant)))
for (i in 1:length(sources)) {
temp              <- one_km_emissions[one_km_emissions$pollutant == sources[i],]
coordinates(temp) <- ~ easting + northing
temp$pollutant    <- NULL
gridded(temp)     <- TRUE
proj4string(temp) <- CRS(ukgrid)
temp              <- raster(temp)
names(temp)       <- tolower(sources[i])
if (i == 1) { one_km_emissions_raster <- temp} else {one_km_emissions_raster <- stack(one_km_emissions_raster, temp)}
}
plot(one_km_emissions_raster$no2)
ten_km_emissions_raster  <- aggregate(one_km_emissions_raster, fact = 10, fun=sum)
plot(ten_km_emissions_raster)
plot(ten_km_emissions_raster$no2)
all_data
rm(one_km_emissions, one_km_emissions_raster, temp, i, sources, ukgrid)
plot(ten_km_emissions_raster$exhaust_pm10)
plot(all_data$easting, all_data$northing, add=T)
plot(ten_km_emissions_raster$exhaust_pm10)
warnings()
ten_km_emissions_polygons <- rasterToPolygons(ten_km_emissions_raster)
ten_km_emissions_polygons
plot(ten_km_emissions_polygons)
plot(ten_km_emissions_polygons$exhaust_pm10)
plot(ten_km_emissions_polygons, col = ten_km_emissions_polygons$exhaust_pm10)
mapview(ten_km_emissions_polygons)
ten_km_emissions_raster  <- aggregate(one_km_emissions_raster, fact = 10, fun=sum)
mapview(ten_km_emissions_polygons, map.types = 'Esri.WorldImagery')
mapview(ten_km_emissions_raster)
mapview(ten_km_emissions_polygons, map.types = 'OpenStreetMap')
all_data
head(all_data)
coordinates(all_data) <- ~ easting + northing
ukgrid = "+init=epsg:27700"
proj4string(all_data) <- CRS(ukgrid)
all_data
plot(all_data[1:10,])
plot(all_data[1:1000,])
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
### Loading any missing libraries
library(rvest)
library(stringr)
library(raster)
library(rgdal)
library(rgeos)
library(ggplot2)
library(sf)
library(rmarkdown)
library(rasterVis)
library(knitr)
library(kableExtra)
library(reshape2)
library(mapview)
grid        <- read.csv('X:/Projects/LAEI2013_TfL_Strategy/z_GridsForJames.csv')
grid        <- grid[,c('GridIdEx', 'Easting', 'Northing')]
names(grid) <- c('grid_exact_cut', 'easting', 'northing')
kable(head(grid)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")
traffic_flows                 <- read.csv('X:/Projects/LAEI2013_Gdrive/TrafficFlows/Major_WithAdjustedIbus_AADT/z_AADT_ExactCut_WithIbus_2013.csv')
names(traffic_flows)          <- tolower(names(traffic_flows))
drop                          <- c('year', 'location_exactcut', 'boroughname_exactcut', 'tlrn', 'irr', 'motorwaynumber', 'petrolcar', 'dieselcar', 'electriccar', 'petrollgv', 'diesellgv', 'electriclgv', 'ltbus', 'coach')
traffic_flows                 <- traffic_flows[, !(names(traffic_flows) %in% drop)]
traffic_flows$toid            <- as.character(traffic_flows$toid)
traffic_flows$total_vehicles  <- (traffic_flows$motorcycle + traffic_flows$taxi + traffic_flows$car + traffic_flows$busandcoach + traffic_flows$lgv + traffic_flows$rigid2axle + traffic_flows$rigid3axle + traffic_flows$rigid4axle +     traffic_flows$artic3axle + traffic_flows$artic5axle + traffic_flows$artic6axle)
traffic_flows$total_light     <- (traffic_flows$motorcycle + traffic_flows$taxi + traffic_flows$car)
traffic_flows$total_heavy     <- (traffic_flows$busandcoach + traffic_flows$lgv + traffic_flows$rigid2axle + traffic_flows$rigid3axle + traffic_flows$rigid4axle + traffic_flows$artic3axle + traffic_flows$artic5axle + traffic_flows$artic6axle)
drop                          <- c('motorcycle', 'taxi', 'car', 'busandcoach', 'lgv', 'rigid2axle', 'rigid3axle', 'rigid4axle', 'artic3axle', 'artic5axle', 'artic6axle')
traffic_flows                 <- traffic_flows[, !(names(traffic_flows) %in% drop)]
kable(head(traffic_flows)) %>%  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")
emissions                     <- read.csv('X:/Projects/LAEI2013_TfL_Strategy/FilesForHerald4/EmissionsByLink/INPUT_RESULTS_LAEI_ExactCutIntersect_Major_2013_LAEI_V117.csv')
names(emissions)              <- tolower(names(emissions))
drop                          <- c('emissions', 'year', 'petrolcar', 'dieselcar', 'petrollgv', 'diesellgv', 'ltbus', 'coach', 'electriccar', 'electriclgv')
emissions                     <- emissions[, !(names(emissions) %in% drop)]
emissions$total_emissions     <- emissions$motorcycle + emissions$taxi + emissions$car + emissions$busandcoach + emissions$lgv + emissions$rigid + emissions$artic + emissions$rigid2axle + emissions$rigid3axle + emissions$rigid4axle + emissions$artic3axle + emissions$artic5axle + emissions$artic6axle
emissions$toid                <- as.character(emissions$toid)
drop                          <- c('motorcycle', 'taxi', 'car', 'busandcoach', 'lgv', 'rigid', 'artic', 'rigid2axle', 'rigid3axle', 'rigid4axle', 'artic3axle', 'artic5axle', 'artic6axle')
emissions                     <- emissions[, !(names(emissions) %in% drop)]
emissions                     <- emissions[!(emissions$pollutant %in% c('TB_PM10_SW', 'TB_PM25_SW')),]
kable(head(emissions)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")
grid_traffic              <- merge(traffic_flows, grid, by.x = c('grid_exactcut_id'), by.y = c('grid_exact_cut'))
rm(traffic_flows)
grid_traffic              <- grid_traffic[order(grid_traffic$toid),]
kable(head(grid_traffic)) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")
grid_traffic <- aggregate(data = grid_traffic, FUN=mean, cbind(speed, total_vehicles, total_light, total_heavy)~ easting+northing+toid)
kable(head(grid_traffic[order(grid_traffic$toid),])) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")
emissions_grids              <- merge(emissions, grid, by.x = 'grid_exactcut_id', by.y = 'grid_exact_cut')
rm(emissions)
emissions_grids              <- emissions_grids[order(emissions_grids$toid),]
all_data                <- merge(emissions_grids, grid_traffic, by.x = c('toid', 'easting', 'northing'), by.y = c('toid', 'easting', 'northing'))
rm(grid, grid_traffic, emissions_grids,drop)
kable(all_data[all_data$easting == 512500 & all_data$northing == 198500 & all_data$pollutant == 'NO2',]) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = F, position = "left")
ukgrid = "+init=epsg:27700"
one_km_emissions <- aggregate(data = all_data, total_emissions ~ pollutant + easting + northing, FUN=sum)
sources          <- as.character((unique(one_km_emissions$pollutant)))
for (i in 1:length(sources)) {
temp              <- one_km_emissions[one_km_emissions$pollutant == sources[i],]
coordinates(temp) <- ~ easting + northing
temp$pollutant    <- NULL
gridded(temp)     <- TRUE
proj4string(temp) <- CRS(ukgrid)
temp              <- raster(temp)
names(temp)       <- tolower(sources[i])
if (i == 1) { one_km_emissions_raster <- temp} else {one_km_emissions_raster <- stack(one_km_emissions_raster, temp)}
}
plot(one_km_emissions_raster$no2)
ten_km_emissions_raster  <- aggregate(one_km_emissions_raster, fact = 10, fun=sum)
plot(ten_km_emissions_raster$no2)
rm(one_km_emissions, one_km_emissions_raster, temp, i)
ten_km_emissions_polygons <- rasterToPolygons(ten_km_emissions_raster)
mapview(ten_km_emissions_polygons, map.types = 'OpenStreetMap')
coordinates(all_data) <- ~ easting + northing
proj4string(all_data) <- CRS(ukgrid)
sources
i=1
all_data$ten_km_contribution    <- NA
head(all_data)
all_data[all_data$pollutant == soures[i],'ten_km_contribution']
all_data[all_data$pollutant == sources[i],'ten_km_contribution']
head(all_data[all_data$pollutant == sources[i],"total_emissions"])
point.in.polygon(all_data[all_data$pollutant == sources[i],], ten_km_emissions_polygons)
point.in.poly(all_data[all_data$pollutant == sources[i],], ten_km_emissions_polygons)
require(spatialEco)
require(sp)
install.packages("spatialEco")
require(spatialEco)
point.in.poly(all_data[all_data$pollutant == sources[i],], ten_km_emissions_polygons)
head(all_data)
ten_km_emissions_polygons$exhaust_pm10
ten_km_emissions_polygons[,sources[1]]
ten_km_emissions_polygons[sources[1]]
ten_km_emissions_polygons[sources[1],]
ten_km_emissions_polygons
ten_km_emissions_polygons[[1]]
ten_km_emissions_polygons[[sources[1]]]
ten_km_emissions_polygons[1]
ten_km_emissions_polygons[sources[1]]
ten_km_emissions_polygons[names(ten_km_emissions_polygons) == sources[1]]
plot(ten_km_emissions_polygons[names(ten_km_emissions_polygons) == sources[1]])
point.in.poly(all_data[all_data$pollutant == sources[i],], ten_km_emissions_polygons[names(ten_km_emissions_polygons) == sources[1]])
temp <- point.in.poly(all_data[all_data$pollutant == sources[i],], ten_km_emissions_polygons[names(ten_km_emissions_polygons) == sources[1]])
names(temp)
head(temp)
raster::intersect(all_data[1,], ten_km_emissions_polygons[1])
all_data[1,]
raster::intersect(all_data[1,], ten_km_emissions_polygons)
raster::intersect( ten_km_emissions_polygons, all_data[1,])
temp <- raster::intersect( ten_km_emissions_polygons, all_data[1,])
head(temp)
head(all_Data)
head(all_data)
hall_data[all_data$pollutant == sources[i],"total_emissions"]
all_data[all_data$pollutant == sources[i],"total_emissions"]
all_data[all_data$pollutant == sources[i],"total_emissions"]$total_emissions
all_data[all_data$pollutant == sources[i],]$total_emissions
length(all_data[all_data$pollutant == sources[i],]$total_emissions)
length(all_data[all_data$pollutant == sources[i],'ten_km_contribution'])
raster::intersect(all_data[all_data$pollutant == sources[i],], ten_km_emissions_polygons)
raster::intersect(all_data[all_data$pollutant == sources[i],], ten_km_emissions_polygons)[,sources[i]]
test <- raster::intersect(all_data[all_data$pollutant == sources[i],], ten_km_emissions_polygons)
head(test)
sources[1]
head(all_data)
test[,tolower(sources[i])]
test[,tolower(sources[i])]+1
test[,tolower(sources[i])][1]
test[,tolower(sources[i])][1,]
test[,tolower(sources[i])][,1]
data.fame(test[,tolower(sources[i])])
data.frame(test[,tolower(sources[i])])
data.frame(test[,tolower(sources[i])])[1]
test <- i
i
all_data[tolower(all_data$pollutant) == tolower(sources[i]),'ten_km_contribution'] <- all_data[tolower(all_data$pollutant) == tolower(sources[i]),]$total_emissions / data.frame(raster::intersect(all_data[all_data$pollutant == sources[i],], ten_km_emissions_polygons)[,tolower(sources[i])])[1]
head(all_data)
for (i in 1:length(sources)) {
all_data[tolower(all_data$pollutant) == tolower(sources[i]),'ten_km_contribution'] <- all_data[tolower(all_data$pollutant) == tolower(sources[i]),]$total_emissions / data.frame(raster::intersect(all_data[all_data$pollutant == sources[i],], ten_km_emissions_polygons)[,tolower(sources[i])])[1]
}
head(all_data)
rm(temp)
nrow(all_data)
nrow(all_data) * 0.8
round(nrow(all_data) * 0.8,0)
all_data[sample(nrow(all_data), round(nrow(all_data) * 0.8,0)), ]
testing_data <- all_data[-training_data,]
training_data <- all_data[sample(nrow(all_data), round(nrow(all_data) * 0.8,0)), ]
testing_data <- all_data[-training_data,]
training_index <- sample(nrow(all_data), round(nrow(all_data) * 0.8,0))
training_data <- all_data[training_index,]
testing_data <- all_data[-training_index,]
head(training_data)
lm(ten_km_contribution ~ length+speed+total_light+total_heavy,data=all_data)
lm(ten_km_contribution ~ length+speed+total_light+total_heavy,data=all_data[all_data$pollutant == 'NO2',])
model <- lm(ten_km_contribution ~ length+speed+total_light+total_heavy,data=all_data[all_data$pollutant == 'NO2',])
print(mode)
print(model)
coef(model)[4]
coef(model)[1]
head(testing_data)
model <- lm(ten_km_contribution ~ length+speed+total_light+total_heavy,data=all_data[all_data$pollutant == 'NO2',])
length_coef      <- coef(model)[2]
speed_coef       <- coef(model)[3]
total_light_coef <- coef(model)[4]
total_heavy_coef <- coef(model)[5]
testing_data$prediction <- coef(model)[1]+(
(length*length_coef) +
(speed*speed_coef) +
(total_light*total_light_coef) +
(total_heavy*total_heavy_coef))
length_coef
testing_data$prediction <- coef(model)[1]+(
(testing_data$length*length_coef) +
(testing_data$speed*speed_coef) +
(testing_data$total_light*total_light_coef) +
(testing_data$total_heavy*total_heavy_coef))
plot(testing_data$ten_km_contribution, testing_data$prediction)
plot(testing_data[testing_data$pollutant == 'NO2',]$ten_km_contribution, testing_data[testing_data$pollutant == 'NO2',]$prediction)
model
model$residuals
coef(model)[2]
coef(model)[1]
model <- glm(ten_km_contribution ~ length+speed+total_light+total_heavy,
data=all_data[all_data$pollutant == 'NO2',])
model <- glm(ten_km_contribution ~ length+speed+total_light+total_heavy,
data=all_data[all_data$pollutant == 'NO2',])
intercept        <- coef(model)[1]
length_coef      <- coef(model)[2]
speed_coef       <- coef(model)[3]
total_light_coef <- coef(model)[4]
total_heavy_coef <- coef(model)[5]
testing_data
head(testing_data)
head(testing_data[testing_data$pollutant == 'NO2',])
head(all_data)
model
summary(model)
testing_data[testing_data$pollutant == 'NO2',]$prediction <- intercept+(
(testing_data[testing_data$pollutant == 'NO2',]$length*length_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$speed*speed_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$total_light*total_light_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$total_heavy*total_heavy_coef))
model <- glm(ten_km_contribution ~ length+speed+total_light+total_heavy,
data=all_data[all_data$pollutant == 'NO2',])
intercept        <- coef(model)[1]
length_coef      <- coef(model)[2]
speed_coef       <- coef(model)[3]
total_light_coef <- coef(model)[4]
total_heavy_coef <- coef(model)[5]
testing_data[testing_data$pollutant == 'NO2',]$prediction <- intercept+(
(testing_data[testing_data$pollutant == 'NO2',]$length*length_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$speed*speed_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$total_light*total_light_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$total_heavy*total_heavy_coef))
training_index <- sample(nrow(all_data), round(nrow(all_data) * 0.8,0))
training_data <- all_data[training_index,]
testing_data <- all_data[-training_index,]
model <- glm(ten_km_contribution ~ length+speed+total_light+total_heavy,
data=all_data[all_data$pollutant == 'NO2',])
intercept        <- coef(model)[1]
length_coef      <- coef(model)[2]
speed_coef       <- coef(model)[3]
total_light_coef <- coef(model)[4]
total_heavy_coef <- coef(model)[5]
model
head(testing_data)
head(training_data)
testing_data$prediction <- NA
testing_data[testing_data$pollutant == 'NO2',]$prediction <- intercept+(
(testing_data[testing_data$pollutant == 'NO2',]$length*length_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$speed*speed_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$total_light*total_light_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$total_heavy*total_heavy_coef))
testing_data[testing_data$pollutant == 'NO2',]$length*length_coef
testing_data[testing_data$pollutant == 'NO2',]$speed*speed_coef
testing_data[testing_data$pollutant == 'NO2',]$total_light*total_light_coef
testing_data[testing_data$pollutant == 'NO2',]$total_heavy*total_heavy_coef
intercept+(
(testing_data[testing_data$pollutant == 'NO2',]$length*length_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$speed*speed_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$total_light*total_light_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$total_heavy*total_heavy_coef))
length(intercept+(
(testing_data[testing_data$pollutant == 'NO2',]$length*length_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$speed*speed_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$total_light*total_light_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$total_heavy*total_heavy_coef)))
length(testing_data[testing_data$pollutant == 'NO2',]$prediction)
testing_data[testing_data$pollutant == 'NO2','prediction'] <- intercept+(
(testing_data[testing_data$pollutant == 'NO2',]$length*length_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$speed*speed_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$total_light*total_light_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$total_heavy*total_heavy_coef))
head(testing_data)
head(testing_data)
plot(testing_data$total_emissions, testing_data$prediction)
summary(testing_data)
plot(testing_data$ten_km_contribution, testing_data$prediction)
plot(testing_data$ten_km_contribution, testing_data$prediction, xlim = c(0,0.01), ylim = c(0,0.01))
training_index <- sample(nrow(all_data), round(nrow(all_data) * 0.8,0))
training_data <- all_data[training_index,]
testing_data <- all_data[-training_index,]
model <- glm(ten_km_contribution ~ speed+total_light+total_heavy,
data=all_data[all_data$pollutant == 'NO2',])
intercept        <- coef(model)[1]
length_coef      <- coef(model)[2]
speed_coef       <- coef(model)[3]
total_light_coef <- coef(model)[4]
total_heavy_coef <- coef(model)[5]
training_index <- sample(nrow(all_data), round(nrow(all_data) * 0.8,0))
training_data <- all_data[training_index,]
testing_data <- all_data[-training_index,]
model <- glm(ten_km_contribution ~ speed+total_light+total_heavy,
data=all_data[all_data$pollutant == 'NO2',])
intercept        <- coef(model)[1]
#length_coef      <- coef(model)[2]
speed_coef       <- coef(model)[2]
total_light_coef <- coef(model)[3]
total_heavy_coef <- coef(model)[4]
testing_data$prediction <- NA
testing_data[testing_data$pollutant == 'NO2','prediction'] <- intercept+(
#(testing_data[testing_data$pollutant == 'NO2',]$length*length_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$speed*speed_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$total_light*total_light_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$total_heavy*total_heavy_coef))
plot(testing_data$ten_km_contribution, testing_data$prediction, xlim = c(0,0.01), ylim = c(0,0.01))
training_index <- sample(nrow(all_data), round(nrow(all_data) * 0.8,0))
training_data <- all_data[training_index,]
testing_data <- all_data[-training_index,]
model <- glm(ten_km_contribution ~ length+speed+total_light+total_heavy,
data=all_data[all_data$pollutant == 'NO2',])
intercept        <- coef(model)[1]
length_coef      <- coef(model)[2]
speed_coef       <- coef(model)[2]
total_light_coef <- coef(model)[2]
total_heavy_coef <- coef(model)[3]
training_index <- sample(nrow(all_data), round(nrow(all_data) * 0.8,0))
training_data <- all_data[training_index,]
testing_data <- all_data[-training_index,]
model <- glm(ten_km_contribution ~ length+speed+total_light+total_heavy,
data=all_data[all_data$pollutant == 'NO2',])
intercept        <- coef(model)[1]
length_coef      <- coef(model)[2]
speed_coef       <- coef(model)[2]
total_light_coef <- coef(model)[2]
total_heavy_coef <- coef(model)[3]
model <- glm(ten_km_contribution ~ length+speed+total_light+total_heavy,
data=all_data[all_data$pollutant == 'NO2',])
intercept        <- coef(model)[1]
length_coef      <- coef(model)[2]
speed_coef       <- coef(model)[2]
total_light_coef <- coef(model)[2]
total_heavy_coef <- coef(model)[3]
testing_data$prediction <- NA
testing_data[testing_data$pollutant == 'NO2','prediction'] <- intercept+(       (training_data[training_data$pollutant == 'NO2',]$length*length_coef) +
(training_data[training_data$pollutant == 'NO2',]$speed*speed_coef) +
(training_data[training_data$pollutant == 'NO2',]$total_light*total_light_coef) +
(training_data[training_data$pollutant == 'NO2',]$total_heavy*total_heavy_coef))
training_index <- sample(nrow(all_data), round(nrow(all_data) * 0.8,0))
training_data <- all_data[training_index,]
testing_data <- all_data[-training_index,]
model <- glm(ten_km_contribution ~ length+speed+total_light+total_heavy,
data=all_data[all_data$pollutant == 'NO2',])
intercept        <- coef(model)[1]
length_coef      <- coef(model)[2]
speed_coef       <- coef(model)[2]
total_light_coef <- coef(model)[2]
total_heavy_coef <- coef(model)[3]
training_data$prediction <- NA
training_data[training_data$pollutant == 'NO2','prediction'] <- intercept+(
(training_data[training_data$pollutant == 'NO2',]$length*length_coef) +
(training_data[training_data$pollutant == 'NO2',]$speed*speed_coef) +
(training_data[training_data$pollutant == 'NO2',]$total_light*total_light_coef) +
(training_data[training_data$pollutant == 'NO2',]$total_heavy*total_heavy_coef))
plot(training_data$ten_km_contribution, training_data$prediction)
plot(training_data$ten_km_contribution, training_data$prediction)
plot(testing_data$ten_km_contribution, testing_data$prediction, xlim = c(0,0.01), ylim = c(0,0.01))
testing_data$prediction <- NA
testing_data[testing_data$pollutant == 'NO2','prediction'] <- intercept+(
(testing_data[testing_data$pollutant == 'NO2',]$length*length_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$speed*speed_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$total_light*total_light_coef) +
(testing_data[testing_data$pollutant == 'NO2',]$total_heavy*total_heavy_coef))
plot(testing_data$ten_km_contribution, testing_data$prediction, xlim = c(0,0.01), ylim = c(0,0.01))
plot(testing_data$ten_km_contribution, testing_data$prediction)
head(training_data)
head(all_data)
summary(all_data$ten_km_contribution)
training_data$ten_km_contribution
as.character(training_data$ten_km_contribution)
as.character(training_data$ten_km_contribution, scientific=F)
as.character(training_data$ten_km_contribution[825], scientific=F)
as.character(training_data$ten_km_contribution[825])
summary(model)
head(training_data)
